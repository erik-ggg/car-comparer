---
import { supabase } from "../lib/supabaseClient";
import type { CarScrappedData } from "../types/types";

const { data: cars, error } = await supabase
  .from("CarDetails")
  .select(
    "name, price, hp, accel, length, weight, trunk_space_no_seats, trunk_space_seats, fuel_tank, url"
  );
if (error) {
  console.error("Error fetching cars details:", error);
} else {
  console.log("Cars details fetched successfully:", cars);
}
---

<section
  id="comparator-section"
  class="w-full h-full px-8 py-8 bg-gradient-to-r from-black to-blue-950"
>
  <div id="car-selector" class="flex p-3 border rounded-lg border-violet-800">
    <div>
      <label class="text-white">Cargar coche en la tabla</label>
      <div class="flex">
        <select
          id="carSelector"
          class="mt-4 p-3 bg-slate-800 border border-blue-600 text-white text-sm rounded-lg focus:outline-none focus:ring-violet-600 focus:border-violet-600 block w-full"
        >
          <option value="" disabled selected>Selecciona un carro</option>
          {
            cars?.map((car: CarScrappedData) => (
              <option value={JSON.stringify(car)}>{car.name}</option>
            ))
          }
        </select>
        <button
          id="loadCarDetails"
          class="border border-blue-600 bg-blue-900 active:bg-blue-500 text-white rounded-lg py-3 px-3 mx-4 mt-4 font-semibold"
        >
          Cargar
        </button>
      </div>
    </div>
    <div class="flex flex-1 flex-row-reverse self-end">
      <button
        id="clear-button"
        class="border border-blue-600 bg-blue-900 active:bg-blue-500 text-white rounded-lg py-3 px-3 mx-4 mt-4 font-semibold"
        >Clear</button
      >
      <button
        id="compare-button"
        class="border border-gray-700 bg-gray-500 cursor-not-allowed text-white rounded-lg py-3 px-3 mx-4 mt-4 font-semibold"
        disabled>Compare</button
      >
    </div>
  </div>
  <div id="car-data-table" class="mt-4 flex"></div>
</section>

<script>
  import { compare } from "../lib/comparerAlgorithm";
  import { inputParser } from "../lib/parser";
  import type { CarScrappedData, CompItem } from "../types/types";

  const TABLE_CELLS = new Map<keyof CarScrappedData, string>([
    ["price", "Price"],
    ["hp", "Horsepower"],
    ["accel", "Acceleration"],
    ["weight", "Weight"],
  ]);

  // Table counter used to generate unique IDs for each table and rows
  let tableCounter = 0;

  const carSelector = document.getElementById(
    "carSelector"
  ) as HTMLSelectElement;
  const button = document.getElementById("loadCarDetails") as HTMLButtonElement;
  const compareButton = document.getElementById(
    "compare-button"
  ) as HTMLButtonElement;
  const clearButton = document.getElementById(
    "clear-button"
  ) as HTMLButtonElement;

  button.addEventListener("click", () => {
    const selectedValue = carSelector.value;
    if (selectedValue && tableCounter < 2) {
      const selectedCar = JSON.parse(selectedValue);
      console.log("Selected Car:", selectedCar);

      // Update your table or UI with selectedCar details
      tableCounter++;
      if (tableCounter === 2) {
        compareButton.disabled = false;
        compareButton.classList.remove(
          "bg-gray-500",
          "cursor-not-allowed",
          "border-gray-700"
        );
        compareButton.classList.add(
          "border-blue-600",
          "bg-blue-900",
          "active:bg-blue-500"
        );
      }
      generateTable(selectedCar, tableCounter);
    }
  });
  compareButton.addEventListener("click", () => {
    console.log("Compare button clicked");
    if (tableCounter >= 2) {
      handleCompare(tableCounter);
    }
  });
  clearButton.addEventListener("click", () => {
    compareButton.disabled = true;
    compareButton.classList.add(
      "bg-gray-500",
      "border-gray-700",
      "cursor-not-allowed"
    );
    compareButton.classList.remove(
      "border-blue-600",
      "bg-blue-900",
      "active:bg-blue-500"
    );

    const tableDiv = document.getElementById(
      "car-data-table"
    ) as HTMLDivElement;
    tableDiv.replaceChildren();
    tableCounter = 0;
  });

  function handleCompare(tableCounter: number) {
    let items = [] as CompItem[];
    for (let index = 1; index <= tableCounter; index++) {
      let item = {} as CompItem;
      item.id = index;
      Array.from(TABLE_CELLS).map(([key]) => {
        const element = document.getElementById(
          `${key}-${index}`
        ) as HTMLElement;
        const value = inputParser(element.textContent || "0");
        const itemKey = key as keyof CompItem;
        item[itemKey] = value;
      });

      items.push(item);
    }
    console.log("Item:", items);
    const result = compare(items);
    highlightComparison(result);
  }

  function highlightComparison(items: CompItem[]) {
    items.forEach((item) => {
      if (item.price === 0) {
        document
          .getElementById(`price-${item.id}`)
          ?.classList.add("text-red-600");
      } else if (item.price === 2) {
        document
          .getElementById(`price-${item.id}`)
          ?.classList.add("text-green-600");
      }
    });
  }

  /**
   * Dynamically generates a table based on the provided data.
   * @param {Object} carData - The car data to populate the table.
   */
  function generateTable(carData: CarScrappedData, tableCounter: number) {
    const tableDiv = document.getElementById(
      "car-data-table"
    ) as HTMLDivElement;

    const container = document.createElement("div");
    container.classList.add("flex-1", "mx-8");
    tableDiv.appendChild(container);

    const h2Header = document.createElement("h2") as HTMLElement;
    h2Header.classList.add("text-white");
    h2Header.textContent = carData.name;
    container.appendChild(h2Header);

    const table = document.createElement("table");
    table.classList.add("w-full", "mt-4");

    const tbody = document.createElement("tbody");

    // Create body rows
    Array.from(TABLE_CELLS).map(([key, value]) => {
      const row = document.createElement("tr");
      row.innerHTML = `
      <td class="w-20 p-3 text-left text-white border border-gray-700">${value}</td>
      <td id="${key}-${tableCounter}" class="p-3 text-left text-white border border-gray-700">${carData[key]}</td>
      `;
      tbody.appendChild(row);
    });

    table.appendChild(tbody);
    container.appendChild(table);
  }
</script>
